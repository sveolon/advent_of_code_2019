fn zeros(size: usize) -> Vec<i32> {
    let mut zero_vec: Vec<i32> = Vec::with_capacity(size as usize);
    for _i in 0..size {
        zero_vec.push(0);
    }
    return zero_vec;
}

fn int_comp(arr: Vec<i32>, input1: i32, input2: i32) -> i32 {
    let mut a = arr;
    let mut i = 0;
    let mut input1_used = false;
    let mut output = std::i32::MAX;
    loop {
        let op = a[i] % 100;

        if op == 99 {
            break;
        }

        if op == 3 {
            let ind = a[i + 1] as usize;
            a[ind] = if !input1_used {input1} else {input2};
            input1_used = true;
            i += 2;
            continue;
        }

        let a1 = if a[i] % 1000 / 100 == 0 {
            a[a[i + 1] as usize]
        } else {
            a[i + 1]
        };

        if op == 4 {
            output = a1;
            i += 2;
            continue;
        }

        let a2 = if a[i] % 10000 / 1000 == 0 {
            a[a[i + 2] as usize]
        } else {
            a[i + 2]
        };

        if op == 1 {
            let ind = a[i + 3] as usize;
            a[ind] = a1 + a2;
            i += 4;
        }
        if op == 2 {
            let ind = a[i + 3] as usize;
            a[ind] = a1 * a2;
            i += 4;
        }
        if op == 5 {
            if a1 > 0 {
                i = a2 as usize;
            } else {
                i += 3;
            }
        }
        if op == 6 {
            if a1 == 0 {
                i = a2 as usize;
            } else {
                i += 3;
            }
        }
        if op == 7 {
            let ind = a[i + 3] as usize;
            a[ind] = if a1 < a2 { 1 } else { 0 };
            i += 4;
        }
        if op == 8 {
            let ind = a[i + 3] as usize;
            a[ind] = if a1 == a2 { 1 } else { 0 };
            i += 4;
        }
    }
    return output;
}

fn main() {
    let a = [3,8,1001,8,10,8,105,1,0,0,21,46,59,84,93,110,191,272,353,434,99999,3,9,101,2,9,9,102,3,9,9,1001,9,5,9,102,4,9,9,1001,9,4,9,4,9,99,3,9,101,3,9,9,102,5,9,9,4,9,99,3,9,1001,9,4,9,1002,9,2,9,101,2,9,9,102,2,9,9,1001,9,3,9,4,9,99,3,9,1002,9,2,9,4,9,99,3,9,102,2,9,9,1001,9,5,9,1002,9,3,9,4,9,99,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,2,9,9,4,9,99,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,99,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,1,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,99,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,99,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,99];
    let mut arr = zeros(a.len() * 10);
    for i in 0..a.len() {
        arr[i] = a[i];
    }
    let result = int_comp(arr, 0, 0);

    println!("{}", result);
}
