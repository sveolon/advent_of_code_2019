use std::collections::HashMap;
use std::collections::HashSet;
use std::collections::VecDeque;

fn main() {
    let a = [
"#################################################################################",
"#...#p........#..k........#.K..f........#...#.........#...........#.....#.......#",
"#.#V#.#######.#P#########.#.#########.###.#.#######.###.###.#####.#.###.#.#####Y#",
"#.#.#.#.C...#...#....u..#...#.A.....#...#.#.........#...#...#...#.#...#...#.....#",
"#.#.#.#.###.#########.#.#####.#####.#.#.#.#########.#.###.#####.#.###.#####.#####",
"#.#...#...#.#.......#.#.#.#...#...#.#.#.#...#...#...#.#...#.....#.....#.#...#...#",
"#.#####.#.#.###.###.#.#.#.#.###.#.#.#.#.###.#.#.#####.#.###.###########.#.###.###",
"#...#.#.#.#...#.#.#...#.#.#i#...#.#.#.#.#...#.#.....#.#...#.........#.....#.....#",
"###.#.#.#.###.#.#.#####.#.#.#.#.#.#.###F#.###.#####.#.###.#######.#.#.#####.###.#",
"#...#..n#.#.#...#.....#...#.#.#.#.#.#a..#.....#.#...#...#.#.....#.#.#.....#...#.#",
"#O#######.#.#####.#####.###.#.#.#.#.#.###.#####.#.#.###J#.#.###.#.#######.#####.#",
"#...#.....#.....#.....#.#...#.#.#.#...#.#.......#.#...#.#.#.#.#.#.........#.....#",
"###.#.#####.#.###.###.#.#.#####.#######.#.#######.#####.#.#.#.#.###.#######.###.#",
"#.#.#.#...#.#.....#.#...#.#.....#.......#.#t....#.#.....#l#.#.#...#...#....x#.#.#",
"#.#.#.###.#.#######.#####.###.###.###.#.###.###.#.#.#####.#.#.###.###.#.#####.#.#",
"#...#...#.#...#.........#...#....q#...#.#...#...#.#...#.#.#...#...#.#...#...#...#",
"#.#####.#.###.#.###########I#######.###.#.#####.#.###.#.#.###.#.###.#####.#.#.###",
"#.......#...#.#.#......z....#...#...#...#.#...#.#.......#.#...#.#.........#.#.#.#",
"#########.#.#.#.#.###########.#.#.###.###.#.#.#.#.#######.#.###.#.#########G#.#.#",
"#.....#...#.#...#.#...........#.#.#.#...#.#.#.#.#...#.....#.#...#.....#...#.#...#",
"#W#.###.###.###.#.#####.#.#####.#.#.###.#.#.#.#.###.#.#####.#.#######.#.###.###.#",
"#.#...#...#.....#...Z.#.#...#.#...#.#...#...#.#...#.#.....#.#.#.......#.#...#...#",
"#.###.###.#############.###.#.#####.#.#######.###.#.#####.#.###.#.#####.#.###.###",
"#...#...#.#.....#.....#...#.#.......#.#.#...#.#.#.#.#.....#...#.#.#...#.....#...#",
"#.#####.#.#.###.###.#.###.#.#######.#.#.#.#.#.#.#.#.#.###.###.###.#.#.#.#######.#",
"#.#.....#...#...#...#.#...#...#...#...#.#.#.#.#.#.#.#.#.#.#.#...#.#.#...#.......#",
"###.###.#####.###.###.#####.#.#.#.#.###.#.#.#.#.#.###.#.#.#.###.#.###.###.#######",
"#...#.....#.#.#...#.#.#...#.#.#.#.#.....#.#...#.#.....#...#...#.#...#...#.#.....#",
"#.#######.#.#.###.#.#.#.#.###.#.#.#####.#.#####.#######.#####.#.###.#####.#.###.#",
"#.#.....#.#.#.....#.#.#.#...#...#...#...#...#.....#...........#...#.........#...#",
"#.#.###.#.#.#######.#.#.###.#.#####.#.###.#.#.#.###.#########.###.#####.#######.#",
"#r#...#.#...#.......#.#...#.#.#.....#.#.#.#.#.#.........#...#...#.....#...#...#.#",
"#.###.#.#####.#.#####.#.#.#.###.#####.#.#.#.###########.#.#.#.#######.#####.#.###",
"#.....#.#...#.#.#.....#.#.#.....#.....#.#.#.......#...#.#.#.#.#.....#.#.....#...#",
"#.#####.#.#.#.#.#.#######.#######.#####.#.#######.#.#.###.#.###.###.#.#.#######.#",
"#.#.#...#.#.#.#.#.#.....#.....#.#.#.....#.#.....#...#.....#...#...#.#...#.......#",
"#.#.#.###.#.#.#.#.###.#.#.###.#.#.###.#.#.#.###.#############.###.#.#####.#######",
"#.#.#...#.#...#.#.#...#.#...#.#...#...#.#.#.#...#........m..#...#.#.....#.....#.#",
"#.#.###.#.#####.#.#.###.#####.#.###.###.#.#.#.###.#########.#.###.#####.#####.#.#",
"#.....#.......#.....#.........#.....#.......#.....#.........#.........#.........#",
"#######################################.@.#######################################",
"#.#...M.........#.H...............#.........#h....#...#.....#.#..............b..#",
"#.#.###########.#####.###########.#.###.###.#.#.#.#.#.###.#.#.#.###############.#",
"#.#...........#.......#.........#...#...#...#.#.#...#.#...#.#.......#.D.#.....#.#",
"#.###########.###.#####.#####.#######.###.###.#.#####.#.###.#########.#.#.###.#.#",
"#.....#.....#...#.#...#.#...#.....#...#.#.....#.#...#.#.#...#.........#...#.#.#.#",
"#.###.#.###.###.###.#.#.###.#####.#.###.#######.#.#.#.#.#.###.#############.#.#.#",
"#...#.#.#.#...#.....#.#.........#...#...#.....#.#.#.#...#.#...#.............#.#.#",
"#.###.#.#.#.#########.#########.#####.###.###.#.###.#####T#.#.###.#####.#####.#.#",
"#.#...#...#.....#...#.#.......#...#.....#.#.....#...#...#.#.#...#.....#.......#.#",
"#.#.###.#####.###.#.#.#.#####.###.#####.#.#######.#.#.###.#.###.#####.#########.#",
"#.#g....#.....#...#...#...#..d..#.......#...#.#...#.#...#.#...#...#.#.......#...#",
"#######.#.###.#.#####.#####.###########.###.#.#.#.#.###.#.#######.#.#######.###.#",
"#.....#.#...#.#.....#.#...#.......#...#.#...#...#.#.....#.....#...#.......#.#...#",
"#.###.#####.#######.###.#.#.###.###.#.#.#.#######.#.#########.#.#####.#####.#.#.#",
"#.#.E.....#...#...#.....#.#...#.....#.#.#.#.......#.#.......#...#.....#.....#.#.#",
"#.#.#####.###.#.#.#######.###.#######.#.#.#.#######.#.#.###.#####.###.#.#####.#.#",
"#.#.#...#.....#.#.........#...#.....#.#.#.#...#.....#.#...#.#.....#w..#...#..s#.#",
"#.###.#.#####.#.#.#########.###.###.#.#.#.###.#######.###.###.###.###.###.###.#.#",
"#.#...#.....#.#.#.#...#.#...#...#...#...#.#...#.......#.#.......#...#...#.....#.#",
"#.#.#######.#.#.###.#.#.#.###.###.#.#####.#.###.#######.#######.###.#.#########.#",
"#.#.#.....#.#.#.....#.#...#.#.#...#.....#.#...............#...#...#.#.#.........#",
"#.#.#.###.#.#.#########.###.#.#.#######.#.###############.#.#####.#.###.#########",
"#.#.#.#...#.#...#...#...#.....#...#.....#.#...........#...#.#.....#.#...#.......#",
"#.#.###.#.#.#####.#.#.#########.#.#######.#.#########.#####.#######.#.###.#####.#",
"#.#.#...#.#.....L.#.#.#.......#.#.......#...#.....#.#...#...#.....#.#.#.......#.#",
"#.#.#.###.#########.#.#.#####.#.#######.#.###.#.#.#.###.#.###.###.#.#.#######.#.#",
"#.#.#.#.#.#.......#...#...#...#.#.......#.#.#.#.#.....#.#.#...#...#.#.....#...#.#",
"#.#.#.#.#.#.###.#.#######.#.#####.#######.#.#.#.#######.#.###.#.###.#####.#.###.#",
"#.#...#.#.#.#...#.#.......#.#...#....c..#.#...#.#.....#.#.....#.#.......#.#.R.#.#",
"#.#####.#.###S###.#.#.#####.#.#.#######.#.#####.#.###.#.#######.#.###.###.#####.#",
"#.......#.....#...#.#.#...#...#.....#...#.....#.#.#...#...#.....#...#...#...#e..#",
"#.#####.#######B#####.#.###########.#.#######.#.#.#.###.###.#######.###.###.#.#.#",
"#.....#.........#.....#.....#.....#.#...#...#...#.#...#...#.....#...#.....#.#.#.#",
"#####.###########.#####.###.#.###.#.###.###.###.#.###.###.#####.#####.###.#.#.#.#",
"#...#.....#.......#.#.....#.#...#.#...#.#.....#.#.#.......#...#...#...#...#.#.#.#",
"###.#####.#.#######.#.#####N###.#.###.#.#.#####.#.#######.#.#.###.#.#######.#.#.#",
"#...#.....#...#..o....#.#...#...#...#...#.#.....#.......#.#j#...#y#.......#.#.#.#",
"#.###.#######.#.#######.#.###.###.#####.#.#.###########.###.#.###.#.#####.#.#X#.#",
"#.............#........v#.......#.U.....#.Q...........#.....#.....#.....#.....#.#",
"#################################################################################",
];

    let max_y: usize = a.len();
    let max_x: usize = a[0].len();

    let mut passages = HashSet::new();
    let mut doors = HashMap::new();
    let mut doors_inv = HashMap::new();
    let mut keys = HashMap::new();
    let mut keys_inv = HashMap::new();
    let mut curr = (0,0);
    
    for y in 0..max_y {
        for x in 0..max_x {
            let c = a[y].chars().nth(x).unwrap();
            
            if c == '#' {
                continue;
            }
            passages.insert((x,y));
            if c == '@' {
                curr = (x, y);
            } else if 'a' <= c && c <= 'z' {
                keys.insert(c, (x,y));
                keys_inv.insert((x,y), c);
            } else if 'A' <= c && c <= 'Z' {
                doors.insert(c, (x,y));
                doors_inv.insert((x,y), c);
            }
        }
    } 
    
    /*for y in 0..max_y {
    print!("\n");
    for x in 0..max_x {
        if doors_inv.contains_key(&(x,y)) {
            print!("{}", doors_inv[&(x,y)]);
        } else if keys_inv.contains_key(&(x,y)) {
            print!("{}", keys_inv[&(x,y)]);
        } else if curr.0 == x && curr.1 == y {
            print!("@");
        } else if passages.contains(&(x,y)) {
            print!(".");
        } else {
            print!("#");
        }
    }*/
        
    let mut queue = VecDeque::new();
    let found_keys = HashSet::new();
    let found_doors = HashSet::new();
    let mut visited = HashSet::new();

    visited.insert(curr);
    queue.push_front((curr, 0, found_keys, found_doors, visited));
    let mut i = 0;
    while queue.len() > 0 {
        if i % 10000 == 0 {
            print!("q: {}; ", queue.len());
        }
        i += 1; 
        let ((x,y), steps, mut found_keys, mut found_doors, mut visited) = queue.pop_back().unwrap();
        
        if keys_inv.contains_key(&(x,y)) && !found_keys.contains(&keys_inv[&(x,y)]) {
            found_keys.insert(keys_inv[&(x,y)]);
            visited.clear();
        }
        if doors_inv.contains_key(&(x,y)) {
            let key = (doors_inv[&(x,y)] as u8 - 'A' as u8 + 'a' as u8) as char;
            if found_keys.contains(&key) && !found_doors.contains(&key) {
                found_doors.insert(key);
                visited.clear();
            } else {
                continue;
            }
        }
        visited.insert((x,y));
        
        if found_doors.len() == doors.len() {
            println!("result: {}", steps);
            return;
        }
        
        if !visited.contains(&(x,y+1)) && passages.contains(&(x,y+1)) {
            queue.push_front(((x,y+1), steps+1, found_keys.clone(), found_doors.clone(), visited.clone()));
        }
        if !visited.contains(&(x,y-1)) && passages.contains(&(x,y-1)) {
            queue.push_front(((x,y-1), steps+1, found_keys.clone(), found_doors.clone(), visited.clone()));
        }
        if !visited.contains(&(x+1,y)) && passages.contains(&(x+1,y)) {
            queue.push_front(((x+1,y), steps+1, found_keys.clone(), found_doors.clone(), visited.clone()));
        }
        if !visited.contains(&(x-1,y)) && passages.contains(&(x-1,y)) {
            queue.push_front(((x-1,y), steps+1, found_keys.clone(), found_doors.clone(), visited.clone()));
        }
    }
}
